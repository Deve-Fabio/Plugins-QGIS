# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GeopDetran
                                 A QGIS plugin
 Plugin para realizar consultas nos arquivos geográficos
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-01-28
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Francisco Fábio - Detran - DF
        email                : nugeo@detran.df.gov.br
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import *
from qgis.PyQt.QtGui import *
from qgis.PyQt.QtWidgets import *
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from qgis.utils import *
from qgis.core import *

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .Geop_Detran_dialog import GeopDetranDialog
import os.path
# Importa controle
from .DaoGeop import GeopEspacial

global inst; # Variável global
inst=GeopEspacial()  # Recebe a classe de controle

class GeopDetran:
    """QGIS Plugin Implementação."""

    def __init__(self, iface):
        # Save reference to the QGIS interface
        self.dlg = GeopDetranDialog()
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'GeopDetran_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Geop Detran')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('GeopDetran', message)

    def add_action(
            self,
            icon_path,
            text,
            callback,
            enabled_flag=True,
            add_to_menu=True,
            add_to_toolbar=True,
            status_tip=None,
            whats_this=None,
            parent=None):

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    # icone no QGIS
    def initGui(self):
        icon_path = ':/plugins/Geop_Detran/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Geop Detran'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

  
    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Geop Detran'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        self.conectaEventos()
        self.layer_ativa()


        # Mostrar Diálogo
        self.dlg.show()

    def conectaEventos(self):
        self.dlg.comboBox_camada.activated.connect(self.setCampo)

        pass

    def disconectaEventos(self):
        pass

    # layers disponível no QGIS
    def layer_ativa(self):
        self.dlg.comboBox_camada.clear()
        layers = self.iface.mapCanvas().layers()
        layer_list = []  # vetor
        for layer in layers:
            if layer not in layer_list:
                layer_list.append(layer.name())  # Nome da camada
                self.dlg.comboBox_camada.addItems(layer_list)  # Visualizo na tela
            else:
                pass

    # Setar os campos
    def setCampo(self):
        self.dlg.comboBox_camada_compo.clear()           # Limpar campo
        camada = self.dlg.comboBox_camada.currentText()  # Pega camada escolhida
        res = inst.getCampo(camada)                      # Tras campos da camada escolhida
        for lis_cam in res:
            if not lis_cam: # Se a camada está vazia
                print('Camada não está no banco de dados')
            else: # Se não está vazia
                self.dlg.comboBox_camada_compo.addItems(lis_cam)


